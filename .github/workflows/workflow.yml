# Build and deploy workflow to CH1

name: Build and Deploy to Sandbox CH2

# auto workflow runs on these
on:
  push:
    branches: [ main ]
# allows manual trigger for workflow in Actions tab
  workflow_dispatch:
    
jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    # allows action to have access to the source code
    - uses: actions/checkout@v2
    # caches maven dependencies so after the first run, it'll be faster
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    # setup java in ubuntu
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    # nexus repo creds might be required to download mule and other plugins
    # also adding in anypoint exchange creds, which are our connected app client id and secret
    - name: Add credentials	
      uses: s4u/maven-settings-action@v2.4.0	
      with:	
        servers: |	
          [{	
           "id": "mule-enterprise",	
           "username": "${{ secrets.MULE_NEXUS_USERNAME }}",	
           "password": "${{ secrets.MULE_NEXUS_PASSWORD }}"	
          },
          {
          "id": "anypoint-exchange-v3",	
           "username": "~~~Client~~~",	
           "password": "${{ secrets.MULE_CLIENT_ID }}~?~${{ secrets.MULE_CLIENT_SECRET }}"	
          }]
    # an optional step to help with debugging maybe
    - name: Print effective-settings (optional)
      run: mvn help:effective-settings

    # i think this step is where the nexus credentials will be used
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    
    # allows us to see which commit hash is being deployed to cloudhub
    - name: Stamp artifact file name with commit hash
      run: |
        artifactName1=$(ls target/*.jar | head -1)
        commitHash=$(git rev-parse --short "$GITHUB_SHA")
        artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/-$commitHash.jar/g")
        mv $artifactName1 $artifactName2
    # using @v1 instead of @master according to github recommendations
    # https://github.com/actions/upload-artifact/issues/41
    - name: Upload artifact 
      uses: actions/upload-artifact@master
      with:
          name: artifacts
          path: target/*.jar
        
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:    
    - uses: actions/checkout@v2
    
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    - uses: actions/download-artifact@master
      with:
        name: artifacts
    
    # - name: Deploy to Exchange
    #   run: |
    #     artifactName=$(ls *.jar | head -1)
    #     mvn deploy \
    #       -Dmule.artifact=$artifactName \
    #       -DskipTests


    - name: Then deploy to Sandbox
      env:
        CLIENT_ID: ${{ secrets.MULE_CLIENT_ID }}
        CLIENT_SECRET: ${{ secrets.MULE_CLIENT_SECRET }}
        APP_NAME: mule-ch2-cicd
      run: |
        artifactName=$(ls *.jar | head -1)
        mvn deploy -DmuleDeploy \
         -Dmule.artifact=$artifactName \
         -DclientId="$CLIENT_ID" \
         -DclientSecret="$CLIENT_SECRET" \
         -DappName="$APP_NAME" \
         -DskipTests
