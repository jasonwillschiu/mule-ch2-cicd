# Build and deploy workflow to CH2
# Logic here updates Exchange with the latest version
# Also deploys to CH2 with the latest version
# In production, you probably want logic to deploy to diff environments depending on version

name: Build and Deploy to Sandbox in CH2

# auto workflow runs on these
on:
  push:
    branches: [ main ]
# allows manual trigger for workflow in Actions tab
  workflow_dispatch:
    
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    # somewhat global variables here
    env:
      APP_NAME: mule-ch2-cicd
      # default pom file is pom.xml
      POM_FILE: pom.xml
      # try running '' for no custom command
      MUNIT_CUSTOM_TEST_COMMAND: 'test -Dmunit.test=test3-params.xml'

    steps:
    # allows action to have access to the source code
    - uses: actions/checkout@v2

    # caches maven dependencies so after the first run, it'll be faster
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    # setup java in ubuntu, 1.8 aka Java 8 is the one that Mule likes atm (Jan 2023)
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    # this part adds credentials maven instead of having a settings.xml file
    # quite a nice way to avoid having another file and less risky way of inserting credentials
    # turns out we don't need nexus credentials for a basic app, but likely will for paid connectors (SAP, HL7, etc)
    - name: Add credentials	
      uses: s4u/maven-settings-action@v2.4.0	
      with:	
        servers: |	
          [{
          "id": "anypoint-exchange-v3",	
           "username": "~~~Client~~~",	
           "password": "${{ secrets.MULE_CLIENT_ID }}~?~${{ secrets.MULE_CLIENT_SECRET }}"	
          },
          {	
           "id": "mule-enterprise",	
           "username": "${{ secrets.MULE_NEXUS_USERNAME }}",	
           "password": "${{ secrets.MULE_NEXUS_PASSWORD }}"	
          }]
    # an optional step to help with debugging maybe
    - name: Print effective-settings (optional)
      run: mvn help:effective-settings

    # build from the pom file
    - name: Build with Maven
      run: mvn -B package --file ${{ env.POM_FILE }} ${{ env.MUNIT_CUSTOM_TEST_COMMAND }}

    # run specific M-unit test
    # might need to skip tests in the pom file and only run test here for desired separation
    - name: Run M-unit test3 with params
      run: mvn test ${{ env.MUNIT_CUSTOM_TEST_COMMAND }}
    
    # check version in POM file
    # trying step mvn package 
    - name: Grab local variables from pom.xml
      run: |
        echo "EXCHANGE_VERSION_LOCAL=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout --file ${{ env.POM_FILE }})" >> $GITHUB_ENV
        echo "GROUP_ID=$(mvn help:evaluate -Dexpression=project.groupId -q -DforceStdout)" >> $GITHUB_ENV

    # grab access token so we can use exchange API, write to variable called BEARER_TOKEN
    - name: Get access token for exchange API
      run: |
        echo "BEARER_TOKEN=$(curl --location --request POST https://anypoint.mulesoft.com/accounts/api/v2/oauth2/token \
        --header 'Content-Type: application/x-www-form-urlencoded' \
        --data-urlencode 'client_id=${{ secrets.MULE_CLIENT_ID }}' \
        --data-urlencode 'client_secret=${{ secrets.MULE_CLIENT_SECRET }}' \
        --data-urlencode 'grant_type=client_credentials' | jq -r '.access_token')" >> $GITHUB_ENV

    # grab latest live version using exchange api
    - name: Get latest version from exchange called "EXCHANGE_VERSION_CLOUD"
      run: |
        echo "EXCHANGE_VERSION_CLOUD=$(curl --location --request GET 'https://anypoint.mulesoft.com/exchange/api/v1/assets?organizationId=${{ env.GROUP_ID }}' --header 'Authorization: Bearer ${{ env.BEARER_TOKEN}}' --header 'Content-Type: application/json' | jq -r '.[] | select(.assetId=="${{ env.APP_NAME }}") | .version')" >> $GITHUB_ENV

    # each deploy to exchange needs an increase in version for a non-snapshot version, 
    # else it'll fail and complain that the version already exists
    # a X.X.X-SNAPSHOT version can be overwritten
    # a SNAPSHOT is an under development version that is non-release, it doesn't show up in exchange api calls above
    - name: Deploy to Exchange if snapshot version
      if: contains(env.EXCHANGE_VERSION_LOCAL,'SNAPSHOT')
      run: |
        mvn deploy --file ${{ env.POM_FILE }} ${{ env.MUNIT_CUSTOM_TEST_COMMAND }}
        echo "NEW_VERSION=true" >> $GITHUB_ENV

    # avoid running twice with not contains snapshot
    - name: Deploy to Exchange if new version
      if: (env.EXCHANGE_VERSION_LOCAL != env.EXCHANGE_VERSION_CLOUD) && (!contains(env.EXCHANGE_VERSION_LOCAL,'SNAPSHOT'))
      run: |
        mvn deploy --file ${{ env.POM_FILE }} ${{ env.MUNIT_CUSTOM_TEST_COMMAND }}
        echo "NEW_VERSION=true" >> $GITHUB_ENV

    # - name: view variables
    #   run: |
    #     env

    # if we change the APP_NAME, a new runtime is deployed
    # only run if there's a new version, bash deals with strings by default, not boolean
    - name: Deploy to Sandbox
      if: env.NEW_VERSION=='true'
      run: |
        mvn deploy --file ${{ env.POM_FILE }} ${{ env.MUNIT_CUSTOM_TEST_COMMAND }} \
         -DmuleDeploy \
         -DclientId="${{ secrets.MULE_CLIENT_ID }}" \
         -DclientSecret="${{ secrets.MULE_CLIENT_SECRET }}" \
         -DappName="${{ env.APP_NAME }}" \
         -DskipTests

    # if we change the APP_NAME, a new runtime is deployed
    # only run if there's a new version, bash deals with strings by default, not boolean
    - name: NO NEW VERSION WAS PUSHED to EXCHANGE or RUNTIME
      if: env.NEW_VERSION!='true'
      run: |
        echo "NO NEW VERSION WAS PUSHED to EXCHANGE or RUNTIME"